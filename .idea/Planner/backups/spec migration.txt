from Planner.models import*
def parse(req, lis):
    space = req.find(" ")
    if space == -1:  # no more spaces left
        lis.append(req)

    else:
        before = req[0:space]  # everything before the first space
        lis.append(before)
        parse(req[space + 1::], lis)

def condense(lis):
    #takes a list and returns elements as one string
    string = ""

    for element in list[2::]:
        string = string + " " + element

    return string





def build(apps, schema_editor):
    snIn = open("Planner\dataFILES\DEGREELIST.txt", "r", errors='replace')

    while True:
        planName = snIn.readline().rstrip()
        if planName == "DONE":
            break
        activePlan = Plan.objects.create(name = planName)
        print("activePlan",activePlan)
        snIn.readline() #skip the CORE line

        while True: #core reqs
            reqLine = snIn.readline().rstrip()
            if reqLine == "ENDCORE":
                break
            reqList = []
            parse(reqLine,reqList)
            print("creating Core ob with name", reqList[0],"units",reqList[1],"belonging to",activePlan.name)
            reqOb = Core_Requirement.objects.create(
                name = reqList[0],
                units = int(reqList[1]),
                belongsTo = activePlan
            )
            count = 0
            for r in reqList:
                if r[0] == "*":
                    req = condense(reqList)
                    c = Course.objects.create(ID = req)
                    reqOb.requires.add(c)
                    break

                elif count !=2: #we dont need the first two elements(letter and units)
                    if len(Course.objects.filter(ID=r)) == 0: #req doesnt yet exsist
                        print("creating course",r)
                        c = Course.objects.create(
                            ID=r)
                        reqOb.requires.add(c)
                    else:
                        cOb = Course.objects.get(ID=r) #get the object for the course
                        reqOb.requires.add(cOb)
                count +=1
            reqOb.save()

        while True: #optional reqs
            op = snIn.readline().rstrip()
            if op == "ENDPLAN":
                break
            if len(op) > 9:
                number = op[10]
            else:
                number = 1
            while True:
                reqLine = snIn.readline()
                if reqLine[0:9] == "ENDOPTION":
                    break
                reqList = []
                parse(reqLine, reqList)
                character = reqList[0]
                units = reqList[1]
                reqOb = Optional_Requirement.objects.create(
                    opNumber = number,
                    letter = character,
                    units = units,
                    belongsTo= activePlan)
                count = 0
                for r in reqList:
                    if r[0] == "*":
                        req = condense(reqList)
                        c = Course.objects.create(ID=req)
                        reqOb.require.add(c)
                        break
                    elif count != 2: #we dont need the first two elements(letter and units)
                        if len(Course.objects.filter(ID=r)) == 0: #req doesnt yet exsist
                            c = Course.objects.create(
                                ID=r)
                            reqOb.requires.add(c)
                        else:
                            cOb = Course.objects.get(ID=r)  # get the object for the course
                            reqOb.requires.add(cOb)
                    count +=1
                reqOb.save()